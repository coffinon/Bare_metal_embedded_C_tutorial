
Interrupts_with_priorities.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003d4  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000504  0800050c  0001050c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000504  08000504  0001050c  2**0
                  CONTENTS
  4 .ARM          00000000  08000504  08000504  0001050c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000504  0800050c  0001050c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000504  08000504  00010504  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000508  08000508  00010508  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001050c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  0800050c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  0800050c  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0001050c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000a2d  00000000  00000000  00010535  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000001e0  00000000  00000000  00010f62  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000088  00000000  00000000  00011148  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000070  00000000  00000000  000111d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000fe4e  00000000  00000000  00011240  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00000553  00000000  00000000  0002108e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0005427c  00000000  00000000  000215e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0007585d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000190  00000000  00000000  000758d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080004ec 	.word	0x080004ec

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080004ec 	.word	0x080004ec

08000170 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	f003 0307 	and.w	r3, r3, #7
 800017e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000180:	4b0c      	ldr	r3, [pc, #48]	; (80001b4 <__NVIC_SetPriorityGrouping+0x44>)
 8000182:	68db      	ldr	r3, [r3, #12]
 8000184:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000186:	68ba      	ldr	r2, [r7, #8]
 8000188:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800018c:	4013      	ands	r3, r2
 800018e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000190:	68fb      	ldr	r3, [r7, #12]
 8000192:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000194:	68bb      	ldr	r3, [r7, #8]
 8000196:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000198:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800019c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80001a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80001a2:	4a04      	ldr	r2, [pc, #16]	; (80001b4 <__NVIC_SetPriorityGrouping+0x44>)
 80001a4:	68bb      	ldr	r3, [r7, #8]
 80001a6:	60d3      	str	r3, [r2, #12]
}
 80001a8:	bf00      	nop
 80001aa:	3714      	adds	r7, #20
 80001ac:	46bd      	mov	sp, r7
 80001ae:	bc80      	pop	{r7}
 80001b0:	4770      	bx	lr
 80001b2:	bf00      	nop
 80001b4:	e000ed00 	.word	0xe000ed00

080001b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001b8:	b480      	push	{r7}
 80001ba:	b083      	sub	sp, #12
 80001bc:	af00      	add	r7, sp, #0
 80001be:	4603      	mov	r3, r0
 80001c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001c6:	2b00      	cmp	r3, #0
 80001c8:	db0b      	blt.n	80001e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001ca:	79fb      	ldrb	r3, [r7, #7]
 80001cc:	f003 021f 	and.w	r2, r3, #31
 80001d0:	4906      	ldr	r1, [pc, #24]	; (80001ec <__NVIC_EnableIRQ+0x34>)
 80001d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001d6:	095b      	lsrs	r3, r3, #5
 80001d8:	2001      	movs	r0, #1
 80001da:	fa00 f202 	lsl.w	r2, r0, r2
 80001de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80001e2:	bf00      	nop
 80001e4:	370c      	adds	r7, #12
 80001e6:	46bd      	mov	sp, r7
 80001e8:	bc80      	pop	{r7}
 80001ea:	4770      	bx	lr
 80001ec:	e000e100 	.word	0xe000e100

080001f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80001f0:	b480      	push	{r7}
 80001f2:	b083      	sub	sp, #12
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	4603      	mov	r3, r0
 80001f8:	6039      	str	r1, [r7, #0]
 80001fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000200:	2b00      	cmp	r3, #0
 8000202:	db0a      	blt.n	800021a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000204:	683b      	ldr	r3, [r7, #0]
 8000206:	b2da      	uxtb	r2, r3
 8000208:	490c      	ldr	r1, [pc, #48]	; (800023c <__NVIC_SetPriority+0x4c>)
 800020a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800020e:	0112      	lsls	r2, r2, #4
 8000210:	b2d2      	uxtb	r2, r2
 8000212:	440b      	add	r3, r1
 8000214:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000218:	e00a      	b.n	8000230 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800021a:	683b      	ldr	r3, [r7, #0]
 800021c:	b2da      	uxtb	r2, r3
 800021e:	4908      	ldr	r1, [pc, #32]	; (8000240 <__NVIC_SetPriority+0x50>)
 8000220:	79fb      	ldrb	r3, [r7, #7]
 8000222:	f003 030f 	and.w	r3, r3, #15
 8000226:	3b04      	subs	r3, #4
 8000228:	0112      	lsls	r2, r2, #4
 800022a:	b2d2      	uxtb	r2, r2
 800022c:	440b      	add	r3, r1
 800022e:	761a      	strb	r2, [r3, #24]
}
 8000230:	bf00      	nop
 8000232:	370c      	adds	r7, #12
 8000234:	46bd      	mov	sp, r7
 8000236:	bc80      	pop	{r7}
 8000238:	4770      	bx	lr
 800023a:	bf00      	nop
 800023c:	e000e100 	.word	0xe000e100
 8000240:	e000ed00 	.word	0xe000ed00

08000244 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000244:	b480      	push	{r7}
 8000246:	b089      	sub	sp, #36	; 0x24
 8000248:	af00      	add	r7, sp, #0
 800024a:	60f8      	str	r0, [r7, #12]
 800024c:	60b9      	str	r1, [r7, #8]
 800024e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000250:	68fb      	ldr	r3, [r7, #12]
 8000252:	f003 0307 	and.w	r3, r3, #7
 8000256:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000258:	69fb      	ldr	r3, [r7, #28]
 800025a:	f1c3 0307 	rsb	r3, r3, #7
 800025e:	2b04      	cmp	r3, #4
 8000260:	bf28      	it	cs
 8000262:	2304      	movcs	r3, #4
 8000264:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000266:	69fb      	ldr	r3, [r7, #28]
 8000268:	3304      	adds	r3, #4
 800026a:	2b06      	cmp	r3, #6
 800026c:	d902      	bls.n	8000274 <NVIC_EncodePriority+0x30>
 800026e:	69fb      	ldr	r3, [r7, #28]
 8000270:	3b03      	subs	r3, #3
 8000272:	e000      	b.n	8000276 <NVIC_EncodePriority+0x32>
 8000274:	2300      	movs	r3, #0
 8000276:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000278:	f04f 32ff 	mov.w	r2, #4294967295
 800027c:	69bb      	ldr	r3, [r7, #24]
 800027e:	fa02 f303 	lsl.w	r3, r2, r3
 8000282:	43da      	mvns	r2, r3
 8000284:	68bb      	ldr	r3, [r7, #8]
 8000286:	401a      	ands	r2, r3
 8000288:	697b      	ldr	r3, [r7, #20]
 800028a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800028c:	f04f 31ff 	mov.w	r1, #4294967295
 8000290:	697b      	ldr	r3, [r7, #20]
 8000292:	fa01 f303 	lsl.w	r3, r1, r3
 8000296:	43d9      	mvns	r1, r3
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800029c:	4313      	orrs	r3, r2
         );
}
 800029e:	4618      	mov	r0, r3
 80002a0:	3724      	adds	r7, #36	; 0x24
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bc80      	pop	{r7}
 80002a6:	4770      	bx	lr

080002a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b082      	sub	sp, #8
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	3b01      	subs	r3, #1
 80002b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80002b8:	d301      	bcc.n	80002be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80002ba:	2301      	movs	r3, #1
 80002bc:	e00f      	b.n	80002de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002be:	4a0a      	ldr	r2, [pc, #40]	; (80002e8 <SysTick_Config+0x40>)
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	3b01      	subs	r3, #1
 80002c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80002c6:	210f      	movs	r1, #15
 80002c8:	f04f 30ff 	mov.w	r0, #4294967295
 80002cc:	f7ff ff90 	bl	80001f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002d0:	4b05      	ldr	r3, [pc, #20]	; (80002e8 <SysTick_Config+0x40>)
 80002d2:	2200      	movs	r2, #0
 80002d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002d6:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <SysTick_Config+0x40>)
 80002d8:	2207      	movs	r2, #7
 80002da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80002dc:	2300      	movs	r3, #0
}
 80002de:	4618      	mov	r0, r3
 80002e0:	3708      	adds	r7, #8
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bd80      	pop	{r7, pc}
 80002e6:	bf00      	nop
 80002e8:	e000e010 	.word	0xe000e010

080002ec <main>:
#define PRIGROUP_4G_4S ((const uint32_t) 0x05)
#define PRIGROUP_2G_8S ((const uint32_t) 0x06)
#define PRIGROUP_0G_16S ((const uint32_t) 0x07)


int main(void) {
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b082      	sub	sp, #8
 80002f0:	af00      	add	r7, sp, #0
	RCC->APB2ENR = RCC_APB2ENR_IOPCEN | RCC_APB2ENR_AFIOEN;	// Enable CLK for GPIOC and AFIO
 80002f2:	4b33      	ldr	r3, [pc, #204]	; (80003c0 <main+0xd4>)
 80002f4:	2211      	movs	r2, #17
 80002f6:	619a      	str	r2, [r3, #24]
	RCC->APB1ENR = RCC_APB1ENR_TIM3EN;						// Enable CLK for TIM3
 80002f8:	4b31      	ldr	r3, [pc, #196]	; (80003c0 <main+0xd4>)
 80002fa:	2202      	movs	r2, #2
 80002fc:	61da      	str	r2, [r3, #28]

	GPIOC -> CRL |= GPIO_CRL_MODE2_1;						// Set GPIOB_8 as output mode 2MHz
 80002fe:	4b31      	ldr	r3, [pc, #196]	; (80003c4 <main+0xd8>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	4a30      	ldr	r2, [pc, #192]	; (80003c4 <main+0xd8>)
 8000304:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000308:	6013      	str	r3, [r2, #0]
	GPIOC -> CRL &= ~GPIO_CRL_CNF2_0;						// Set GPIOB_8 as Push-Pull output
 800030a:	4b2e      	ldr	r3, [pc, #184]	; (80003c4 <main+0xd8>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	4a2d      	ldr	r2, [pc, #180]	; (80003c4 <main+0xd8>)
 8000310:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000314:	6013      	str	r3, [r2, #0]
	GPIOC -> CRL |= GPIO_CRL_MODE3_1;						// Set GPIOB_9 as output mode 2MHz
 8000316:	4b2b      	ldr	r3, [pc, #172]	; (80003c4 <main+0xd8>)
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	4a2a      	ldr	r2, [pc, #168]	; (80003c4 <main+0xd8>)
 800031c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000320:	6013      	str	r3, [r2, #0]
	GPIOC -> CRL &= ~GPIO_CRL_CNF3_0;						// Set GPIOB_9 as Push-Pull output
 8000322:	4b28      	ldr	r3, [pc, #160]	; (80003c4 <main+0xd8>)
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	4a27      	ldr	r2, [pc, #156]	; (80003c4 <main+0xd8>)
 8000328:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800032c:	6013      	str	r3, [r2, #0]

	AFIO -> EXTICR[3] = AFIO_EXTICR4_EXTI13_PC;				// Set GPIOC_13 as EXTI AFIO
 800032e:	4b26      	ldr	r3, [pc, #152]	; (80003c8 <main+0xdc>)
 8000330:	2220      	movs	r2, #32
 8000332:	615a      	str	r2, [r3, #20]

	EXTI->IMR = EXTI_IMR_MR13;								// Dunno what it does yet
 8000334:	4b25      	ldr	r3, [pc, #148]	; (80003cc <main+0xe0>)
 8000336:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800033a:	601a      	str	r2, [r3, #0]
	EXTI->FTSR = EXTI_FTSR_TR13;							// Dunno what it does yet
 800033c:	4b23      	ldr	r3, [pc, #140]	; (80003cc <main+0xe0>)
 800033e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000342:	60da      	str	r2, [r3, #12]

	TIM3->PSC = 8000-1;										// Set prescaler
 8000344:	4b22      	ldr	r3, [pc, #136]	; (80003d0 <main+0xe4>)
 8000346:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800034a:	629a      	str	r2, [r3, #40]	; 0x28
	TIM3->ARR = 500-1;										// Dunno what it does
 800034c:	4b20      	ldr	r3, [pc, #128]	; (80003d0 <main+0xe4>)
 800034e:	f240 12f3 	movw	r2, #499	; 0x1f3
 8000352:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM3->DIER = TIM_DIER_UIE;								// Dunno what it does
 8000354:	4b1e      	ldr	r3, [pc, #120]	; (80003d0 <main+0xe4>)
 8000356:	2201      	movs	r2, #1
 8000358:	60da      	str	r2, [r3, #12]
	TIM3->EGR = TIM_EGR_UG;									// Dunno what it does
 800035a:	4b1d      	ldr	r3, [pc, #116]	; (80003d0 <main+0xe4>)
 800035c:	2201      	movs	r2, #1
 800035e:	615a      	str	r2, [r3, #20]
	TIM3->CR1 = TIM_CR1_CEN;								// Dunno what it does
 8000360:	4b1b      	ldr	r3, [pc, #108]	; (80003d0 <main+0xe4>)
 8000362:	2201      	movs	r2, #1
 8000364:	601a      	str	r2, [r3, #0]

	SysTick_Config(8000000/6);								// Configure SysTick
 8000366:	481b      	ldr	r0, [pc, #108]	; (80003d4 <main+0xe8>)
 8000368:	f7ff ff9e 	bl	80002a8 <SysTick_Config>

	NVIC_SetPriorityGrouping(PRIGROUP_4G_4S);				// Create priority 4 group with 4 subgroup
 800036c:	2005      	movs	r0, #5
 800036e:	f7ff feff 	bl	8000170 <__NVIC_SetPriorityGrouping>

	uint32_t prio;

	prio = NVIC_EncodePriority(PRIGROUP_4G_4S, 1, 0);		// Encode priority
 8000372:	2200      	movs	r2, #0
 8000374:	2101      	movs	r1, #1
 8000376:	2005      	movs	r0, #5
 8000378:	f7ff ff64 	bl	8000244 <NVIC_EncodePriority>
 800037c:	6078      	str	r0, [r7, #4]
	NVIC_SetPriority(TIM3_IRQn, prio);						// Set priority
 800037e:	6879      	ldr	r1, [r7, #4]
 8000380:	201d      	movs	r0, #29
 8000382:	f7ff ff35 	bl	80001f0 <__NVIC_SetPriority>

	prio = NVIC_EncodePriority(PRIGROUP_4G_4S, 2, 0);		// Encode priority
 8000386:	2200      	movs	r2, #0
 8000388:	2102      	movs	r1, #2
 800038a:	2005      	movs	r0, #5
 800038c:	f7ff ff5a 	bl	8000244 <NVIC_EncodePriority>
 8000390:	6078      	str	r0, [r7, #4]
	NVIC_SetPriority(EXTI15_10_IRQn, prio);					// Set priority
 8000392:	6879      	ldr	r1, [r7, #4]
 8000394:	2028      	movs	r0, #40	; 0x28
 8000396:	f7ff ff2b 	bl	80001f0 <__NVIC_SetPriority>

	prio = NVIC_EncodePriority(PRIGROUP_4G_4S, 3, 0);		// Encode priority
 800039a:	2200      	movs	r2, #0
 800039c:	2103      	movs	r1, #3
 800039e:	2005      	movs	r0, #5
 80003a0:	f7ff ff50 	bl	8000244 <NVIC_EncodePriority>
 80003a4:	6078      	str	r0, [r7, #4]
	NVIC_SetPriority(SysTick_IRQn, prio);					// Set priority
 80003a6:	6879      	ldr	r1, [r7, #4]
 80003a8:	f04f 30ff 	mov.w	r0, #4294967295
 80003ac:	f7ff ff20 	bl	80001f0 <__NVIC_SetPriority>

	NVIC_EnableIRQ(EXTI15_10_IRQn);							// Enable EXTI
 80003b0:	2028      	movs	r0, #40	; 0x28
 80003b2:	f7ff ff01 	bl	80001b8 <__NVIC_EnableIRQ>
	NVIC_EnableIRQ(TIM3_IRQn);								// Enable TIM3I
 80003b6:	201d      	movs	r0, #29
 80003b8:	f7ff fefe 	bl	80001b8 <__NVIC_EnableIRQ>

	while (1);												// Forever loop
 80003bc:	e7fe      	b.n	80003bc <main+0xd0>
 80003be:	bf00      	nop
 80003c0:	40021000 	.word	0x40021000
 80003c4:	40011000 	.word	0x40011000
 80003c8:	40010000 	.word	0x40010000
 80003cc:	40010400 	.word	0x40010400
 80003d0:	40000400 	.word	0x40000400
 80003d4:	00145855 	.word	0x00145855

080003d8 <TIM3_IRQHandler>:
} /* main */


__attribute__((interrupt)) void TIM3_IRQHandler(void){		// TIM3 interrupt handler
 80003d8:	4668      	mov	r0, sp
 80003da:	f020 0107 	bic.w	r1, r0, #7
 80003de:	468d      	mov	sp, r1
 80003e0:	b481      	push	{r0, r7}
 80003e2:	af00      	add	r7, sp, #0
	TIM3->SR = ~TIM_SR_UIF;									// Dunno what it does yet
 80003e4:	4b07      	ldr	r3, [pc, #28]	; (8000404 <TIM3_IRQHandler+0x2c>)
 80003e6:	f06f 0201 	mvn.w	r2, #1
 80003ea:	611a      	str	r2, [r3, #16]
	GPIOC->ODR ^= GPIO_ODR_ODR2;							// Toggle diode
 80003ec:	4b06      	ldr	r3, [pc, #24]	; (8000408 <TIM3_IRQHandler+0x30>)
 80003ee:	68db      	ldr	r3, [r3, #12]
 80003f0:	4a05      	ldr	r2, [pc, #20]	; (8000408 <TIM3_IRQHandler+0x30>)
 80003f2:	f083 0304 	eor.w	r3, r3, #4
 80003f6:	60d3      	str	r3, [r2, #12]
}
 80003f8:	bf00      	nop
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bc81      	pop	{r0, r7}
 80003fe:	4685      	mov	sp, r0
 8000400:	4770      	bx	lr
 8000402:	bf00      	nop
 8000404:	40000400 	.word	0x40000400
 8000408:	40011000 	.word	0x40011000

0800040c <EXTI15_10_IRQHandler>:
__attribute__((interrupt)) void EXTI15_10_IRQHandler(void){	// EXTI interrupt handler
 800040c:	4668      	mov	r0, sp
 800040e:	f020 0107 	bic.w	r1, r0, #7
 8000412:	468d      	mov	sp, r1
 8000414:	b481      	push	{r0, r7}
 8000416:	af00      	add	r7, sp, #0
	EXTI->PR = EXTI_PR_PR13;								// Dunno what it does yet
 8000418:	4b02      	ldr	r3, [pc, #8]	; (8000424 <EXTI15_10_IRQHandler+0x18>)
 800041a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800041e:	615a      	str	r2, [r3, #20]
	while(1);												// Forever loop
 8000420:	e7fe      	b.n	8000420 <EXTI15_10_IRQHandler+0x14>
 8000422:	bf00      	nop
 8000424:	40010400 	.word	0x40010400

08000428 <SysTick_Handler>:
}
__attribute__((interrupt)) void SysTick_Handler(void){		// SysTick interrupt handler
 8000428:	4668      	mov	r0, sp
 800042a:	f020 0107 	bic.w	r1, r0, #7
 800042e:	468d      	mov	sp, r1
 8000430:	b481      	push	{r0, r7}
 8000432:	af00      	add	r7, sp, #0
	GPIOC->ODR ^= GPIO_ODR_ODR3;							// Toggle diode
 8000434:	4b05      	ldr	r3, [pc, #20]	; (800044c <SysTick_Handler+0x24>)
 8000436:	68db      	ldr	r3, [r3, #12]
 8000438:	4a04      	ldr	r2, [pc, #16]	; (800044c <SysTick_Handler+0x24>)
 800043a:	f083 0308 	eor.w	r3, r3, #8
 800043e:	60d3      	str	r3, [r2, #12]
}
 8000440:	bf00      	nop
 8000442:	46bd      	mov	sp, r7
 8000444:	bc81      	pop	{r0, r7}
 8000446:	4685      	mov	sp, r0
 8000448:	4770      	bx	lr
 800044a:	bf00      	nop
 800044c:	40011000 	.word	0x40011000

08000450 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000450:	480d      	ldr	r0, [pc, #52]	; (8000488 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000452:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000454:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000458:	480c      	ldr	r0, [pc, #48]	; (800048c <LoopForever+0x6>)
  ldr r1, =_edata
 800045a:	490d      	ldr	r1, [pc, #52]	; (8000490 <LoopForever+0xa>)
  ldr r2, =_sidata
 800045c:	4a0d      	ldr	r2, [pc, #52]	; (8000494 <LoopForever+0xe>)
  movs r3, #0
 800045e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000460:	e002      	b.n	8000468 <LoopCopyDataInit>

08000462 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000462:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000464:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000466:	3304      	adds	r3, #4

08000468 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000468:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800046a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800046c:	d3f9      	bcc.n	8000462 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800046e:	4a0a      	ldr	r2, [pc, #40]	; (8000498 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000470:	4c0a      	ldr	r4, [pc, #40]	; (800049c <LoopForever+0x16>)
  movs r3, #0
 8000472:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000474:	e001      	b.n	800047a <LoopFillZerobss>

08000476 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000476:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000478:	3204      	adds	r2, #4

0800047a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800047a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800047c:	d3fb      	bcc.n	8000476 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800047e:	f000 f811 	bl	80004a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000482:	f7ff ff33 	bl	80002ec <main>

08000486 <LoopForever>:

LoopForever:
    b LoopForever
 8000486:	e7fe      	b.n	8000486 <LoopForever>
  ldr   r0, =_estack
 8000488:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800048c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000490:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000494:	0800050c 	.word	0x0800050c
  ldr r2, =_sbss
 8000498:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800049c:	2000001c 	.word	0x2000001c

080004a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004a0:	e7fe      	b.n	80004a0 <ADC1_2_IRQHandler>
	...

080004a4 <__libc_init_array>:
 80004a4:	b570      	push	{r4, r5, r6, lr}
 80004a6:	2500      	movs	r5, #0
 80004a8:	4e0c      	ldr	r6, [pc, #48]	; (80004dc <__libc_init_array+0x38>)
 80004aa:	4c0d      	ldr	r4, [pc, #52]	; (80004e0 <__libc_init_array+0x3c>)
 80004ac:	1ba4      	subs	r4, r4, r6
 80004ae:	10a4      	asrs	r4, r4, #2
 80004b0:	42a5      	cmp	r5, r4
 80004b2:	d109      	bne.n	80004c8 <__libc_init_array+0x24>
 80004b4:	f000 f81a 	bl	80004ec <_init>
 80004b8:	2500      	movs	r5, #0
 80004ba:	4e0a      	ldr	r6, [pc, #40]	; (80004e4 <__libc_init_array+0x40>)
 80004bc:	4c0a      	ldr	r4, [pc, #40]	; (80004e8 <__libc_init_array+0x44>)
 80004be:	1ba4      	subs	r4, r4, r6
 80004c0:	10a4      	asrs	r4, r4, #2
 80004c2:	42a5      	cmp	r5, r4
 80004c4:	d105      	bne.n	80004d2 <__libc_init_array+0x2e>
 80004c6:	bd70      	pop	{r4, r5, r6, pc}
 80004c8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80004cc:	4798      	blx	r3
 80004ce:	3501      	adds	r5, #1
 80004d0:	e7ee      	b.n	80004b0 <__libc_init_array+0xc>
 80004d2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80004d6:	4798      	blx	r3
 80004d8:	3501      	adds	r5, #1
 80004da:	e7f2      	b.n	80004c2 <__libc_init_array+0x1e>
 80004dc:	08000504 	.word	0x08000504
 80004e0:	08000504 	.word	0x08000504
 80004e4:	08000504 	.word	0x08000504
 80004e8:	08000508 	.word	0x08000508

080004ec <_init>:
 80004ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004ee:	bf00      	nop
 80004f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004f2:	bc08      	pop	{r3}
 80004f4:	469e      	mov	lr, r3
 80004f6:	4770      	bx	lr

080004f8 <_fini>:
 80004f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004fa:	bf00      	nop
 80004fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004fe:	bc08      	pop	{r3}
 8000500:	469e      	mov	lr, r3
 8000502:	4770      	bx	lr
