
Systick_example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001ec  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800031c  08000324  00010324  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800031c  0800031c  00010324  2**0
                  CONTENTS
  4 .ARM          00000000  0800031c  0800031c  00010324  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800031c  08000324  00010324  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800031c  0800031c  0001031c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000320  08000320  00010320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010324  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000324  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000324  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010324  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000725  00000000  00000000  0001034d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000018e  00000000  00000000  00010a72  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000060  00000000  00000000  00010c00  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000048  00000000  00000000  00010c60  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000fe30  00000000  00000000  00010ca8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000004af  00000000  00000000  00020ad8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0005407f  00000000  00000000  00020f87  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00075006  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000cc  00000000  00000000  00075084  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000304 	.word	0x08000304

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000304 	.word	0x08000304

08000170 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	6039      	str	r1, [r7, #0]
 800017a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800017c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000180:	2b00      	cmp	r3, #0
 8000182:	db0a      	blt.n	800019a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000184:	683b      	ldr	r3, [r7, #0]
 8000186:	b2da      	uxtb	r2, r3
 8000188:	490c      	ldr	r1, [pc, #48]	; (80001bc <__NVIC_SetPriority+0x4c>)
 800018a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800018e:	0112      	lsls	r2, r2, #4
 8000190:	b2d2      	uxtb	r2, r2
 8000192:	440b      	add	r3, r1
 8000194:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000198:	e00a      	b.n	80001b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800019a:	683b      	ldr	r3, [r7, #0]
 800019c:	b2da      	uxtb	r2, r3
 800019e:	4908      	ldr	r1, [pc, #32]	; (80001c0 <__NVIC_SetPriority+0x50>)
 80001a0:	79fb      	ldrb	r3, [r7, #7]
 80001a2:	f003 030f 	and.w	r3, r3, #15
 80001a6:	3b04      	subs	r3, #4
 80001a8:	0112      	lsls	r2, r2, #4
 80001aa:	b2d2      	uxtb	r2, r2
 80001ac:	440b      	add	r3, r1
 80001ae:	761a      	strb	r2, [r3, #24]
}
 80001b0:	bf00      	nop
 80001b2:	370c      	adds	r7, #12
 80001b4:	46bd      	mov	sp, r7
 80001b6:	bc80      	pop	{r7}
 80001b8:	4770      	bx	lr
 80001ba:	bf00      	nop
 80001bc:	e000e100 	.word	0xe000e100
 80001c0:	e000ed00 	.word	0xe000ed00

080001c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80001c4:	b580      	push	{r7, lr}
 80001c6:	b082      	sub	sp, #8
 80001c8:	af00      	add	r7, sp, #0
 80001ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	3b01      	subs	r3, #1
 80001d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80001d4:	d301      	bcc.n	80001da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80001d6:	2301      	movs	r3, #1
 80001d8:	e00f      	b.n	80001fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80001da:	4a0a      	ldr	r2, [pc, #40]	; (8000204 <SysTick_Config+0x40>)
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	3b01      	subs	r3, #1
 80001e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80001e2:	210f      	movs	r1, #15
 80001e4:	f04f 30ff 	mov.w	r0, #4294967295
 80001e8:	f7ff ffc2 	bl	8000170 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80001ec:	4b05      	ldr	r3, [pc, #20]	; (8000204 <SysTick_Config+0x40>)
 80001ee:	2200      	movs	r2, #0
 80001f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80001f2:	4b04      	ldr	r3, [pc, #16]	; (8000204 <SysTick_Config+0x40>)
 80001f4:	2207      	movs	r2, #7
 80001f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80001f8:	2300      	movs	r3, #0
}
 80001fa:	4618      	mov	r0, r3
 80001fc:	3708      	adds	r7, #8
 80001fe:	46bd      	mov	sp, r7
 8000200:	bd80      	pop	{r7, pc}
 8000202:	bf00      	nop
 8000204:	e000e010 	.word	0xe000e010

08000208 <main>:
#include "stm32f103xb.h"

int main(void)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	af00      	add	r7, sp, #0
    RCC -> APB2ENR = RCC_APB2ENR_IOPCEN;
 800020c:	4b09      	ldr	r3, [pc, #36]	; (8000234 <main+0x2c>)
 800020e:	2210      	movs	r2, #16
 8000210:	619a      	str	r2, [r3, #24]

    GPIOC -> CRL |= GPIO_CRL_MODE2_1;						// Set GPIOB_8 as output mode 2MHz
 8000212:	4b09      	ldr	r3, [pc, #36]	; (8000238 <main+0x30>)
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	4a08      	ldr	r2, [pc, #32]	; (8000238 <main+0x30>)
 8000218:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800021c:	6013      	str	r3, [r2, #0]
    GPIOC -> CRL &= ~GPIO_CRL_CNF2_0;						// Set GPIOB_8 as Push-Pull output
 800021e:	4b06      	ldr	r3, [pc, #24]	; (8000238 <main+0x30>)
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	4a05      	ldr	r2, [pc, #20]	; (8000238 <main+0x30>)
 8000224:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000228:	6013      	str	r3, [r2, #0]

    SysTick_Config(8000000 / 2);							// Configure SysTick
 800022a:	4804      	ldr	r0, [pc, #16]	; (800023c <main+0x34>)
 800022c:	f7ff ffca 	bl	80001c4 <SysTick_Config>

	while(1);
 8000230:	e7fe      	b.n	8000230 <main+0x28>
 8000232:	bf00      	nop
 8000234:	40021000 	.word	0x40021000
 8000238:	40011000 	.word	0x40011000
 800023c:	003d0900 	.word	0x003d0900

08000240 <SysTick_Handler>:
}

__attribute__((interrupt)) void SysTick_Handler(void){									// SysTick interrupt handler
 8000240:	4668      	mov	r0, sp
 8000242:	f020 0107 	bic.w	r1, r0, #7
 8000246:	468d      	mov	sp, r1
 8000248:	b481      	push	{r0, r7}
 800024a:	af00      	add	r7, sp, #0
	GPIOC -> ODR ^= GPIO_ODR_ODR2;							// Toggle diode
 800024c:	4b05      	ldr	r3, [pc, #20]	; (8000264 <SysTick_Handler+0x24>)
 800024e:	68db      	ldr	r3, [r3, #12]
 8000250:	4a04      	ldr	r2, [pc, #16]	; (8000264 <SysTick_Handler+0x24>)
 8000252:	f083 0304 	eor.w	r3, r3, #4
 8000256:	60d3      	str	r3, [r2, #12]
}
 8000258:	bf00      	nop
 800025a:	46bd      	mov	sp, r7
 800025c:	bc81      	pop	{r0, r7}
 800025e:	4685      	mov	sp, r0
 8000260:	4770      	bx	lr
 8000262:	bf00      	nop
 8000264:	40011000 	.word	0x40011000

08000268 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000268:	480d      	ldr	r0, [pc, #52]	; (80002a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800026a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800026c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000270:	480c      	ldr	r0, [pc, #48]	; (80002a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000272:	490d      	ldr	r1, [pc, #52]	; (80002a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000274:	4a0d      	ldr	r2, [pc, #52]	; (80002ac <LoopForever+0xe>)
  movs r3, #0
 8000276:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000278:	e002      	b.n	8000280 <LoopCopyDataInit>

0800027a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800027a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800027c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800027e:	3304      	adds	r3, #4

08000280 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000280:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000282:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000284:	d3f9      	bcc.n	800027a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000286:	4a0a      	ldr	r2, [pc, #40]	; (80002b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000288:	4c0a      	ldr	r4, [pc, #40]	; (80002b4 <LoopForever+0x16>)
  movs r3, #0
 800028a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800028c:	e001      	b.n	8000292 <LoopFillZerobss>

0800028e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800028e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000290:	3204      	adds	r2, #4

08000292 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000292:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000294:	d3fb      	bcc.n	800028e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000296:	f000 f811 	bl	80002bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800029a:	f7ff ffb5 	bl	8000208 <main>

0800029e <LoopForever>:

LoopForever:
    b LoopForever
 800029e:	e7fe      	b.n	800029e <LoopForever>
  ldr   r0, =_estack
 80002a0:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80002a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002a8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002ac:	08000324 	.word	0x08000324
  ldr r2, =_sbss
 80002b0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002b4:	2000001c 	.word	0x2000001c

080002b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002b8:	e7fe      	b.n	80002b8 <ADC1_2_IRQHandler>
	...

080002bc <__libc_init_array>:
 80002bc:	b570      	push	{r4, r5, r6, lr}
 80002be:	2500      	movs	r5, #0
 80002c0:	4e0c      	ldr	r6, [pc, #48]	; (80002f4 <__libc_init_array+0x38>)
 80002c2:	4c0d      	ldr	r4, [pc, #52]	; (80002f8 <__libc_init_array+0x3c>)
 80002c4:	1ba4      	subs	r4, r4, r6
 80002c6:	10a4      	asrs	r4, r4, #2
 80002c8:	42a5      	cmp	r5, r4
 80002ca:	d109      	bne.n	80002e0 <__libc_init_array+0x24>
 80002cc:	f000 f81a 	bl	8000304 <_init>
 80002d0:	2500      	movs	r5, #0
 80002d2:	4e0a      	ldr	r6, [pc, #40]	; (80002fc <__libc_init_array+0x40>)
 80002d4:	4c0a      	ldr	r4, [pc, #40]	; (8000300 <__libc_init_array+0x44>)
 80002d6:	1ba4      	subs	r4, r4, r6
 80002d8:	10a4      	asrs	r4, r4, #2
 80002da:	42a5      	cmp	r5, r4
 80002dc:	d105      	bne.n	80002ea <__libc_init_array+0x2e>
 80002de:	bd70      	pop	{r4, r5, r6, pc}
 80002e0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80002e4:	4798      	blx	r3
 80002e6:	3501      	adds	r5, #1
 80002e8:	e7ee      	b.n	80002c8 <__libc_init_array+0xc>
 80002ea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80002ee:	4798      	blx	r3
 80002f0:	3501      	adds	r5, #1
 80002f2:	e7f2      	b.n	80002da <__libc_init_array+0x1e>
 80002f4:	0800031c 	.word	0x0800031c
 80002f8:	0800031c 	.word	0x0800031c
 80002fc:	0800031c 	.word	0x0800031c
 8000300:	08000320 	.word	0x08000320

08000304 <_init>:
 8000304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000306:	bf00      	nop
 8000308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800030a:	bc08      	pop	{r3}
 800030c:	469e      	mov	lr, r3
 800030e:	4770      	bx	lr

08000310 <_fini>:
 8000310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000312:	bf00      	nop
 8000314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000316:	bc08      	pop	{r3}
 8000318:	469e      	mov	lr, r3
 800031a:	4770      	bx	lr
